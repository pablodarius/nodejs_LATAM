"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const m4apiNode_1 = require("./m4apiNode");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const rxjs_1 = require("rxjs");
class TestUtils {
    /**
     * Create xml file with the M4Object metadata definition
     * @param {string} server
     * @param {string} user
     * @param {string} pass
     * @param {string} m4objectId M4Object ID
     * @param {string} filepath Absolute directory path
     */
    createXmlMetadataFile(server, user, pass, m4objectId, filepath) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!fs_1.default.existsSync(filepath)) {
                throw new Error("Destination directory does not exist. Check path: '" + filepath + "'");
            }
            fs_1.default.access(filepath, fs_1.default.constants.W_OK, (err) => {
                if (err) {
                    throw new Error("No write permissions on the destination directory. Check path: '" + filepath + "'");
                }
            });
            const m4ApiNode = new m4apiNode_1.M4ApiNode(server, user, pass);
            yield m4ApiNode.initializeAsync();
            const logonResult = yield m4ApiNode.logon();
            if (!logonResult || !logonResult.getToken()) {
                throw new Error("You must be authenticated to create XML Metadata!");
            }
            const subject = new rxjs_1.Subject();
            const m4window = m4ApiNode.__getWindowObject__();
            const oldXHROpen = m4window.XMLHttpRequest.prototype.open;
            m4window.XMLHttpRequest.prototype.open = function () {
                this.addEventListener('load', function (pEvent) {
                    if (pEvent && pEvent.target && pEvent.target.m4jsapiURL) {
                        const _url = pEvent.target.m4jsapiURL;
                        if (_url.includes("/metadata/md/")) {
                            const _xmlFilePath = path_1.default.join(filepath, m4objectId + ".xml");
                            fs_1.default.writeFile(_xmlFilePath, this.responseText, (err) => {
                                if (err) {
                                    throw new Error(err.message);
                                }
                                subject.next({ id: m4objectId, xmlFilePath: _xmlFilePath });
                            });
                        }
                    }
                });
                return oldXHROpen.apply(this, arguments);
            };
            yield m4ApiNode.loadMetadata([m4objectId]);
            subject.subscribe((value) => __awaiter(this, void 0, void 0, function* () {
                console.log("M4Object: " + value.id + " > XML Metadata file created in '" + value.xmlFilePath + "'");
                yield m4ApiNode.logout();
            }));
        });
    }
}
exports.TestUtils = TestUtils;
//# sourceMappingURL=testUtils.js.map