"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const m4apiNode_1 = require("../m4apiNode");
const server = "http://arya.meta4.com:5020";
const user01 = "NOMINAM";
const pass01 = "123";
const user02 = "ORLIEMOBILE";
const pass02 = "RUN";
function example() {
    return __awaiter(this, void 0, void 0, function* () {
        // Create Instances
        const m4apiNode01 = new m4apiNode_1.M4ApiNode(server, user01, pass01);
        const m4apiNode02 = new m4apiNode_1.M4ApiNode(server, user02, pass02);
        // Initialize instances
        yield m4apiNode01.initializeAsync();
        yield m4apiNode02.initializeAsync();
        // Enable console message
        m4apiNode01.enableConsoleMessages();
        // Logon Instances
        const logonResult01 = yield m4apiNode01.logon();
        const logonResult02 = yield m4apiNode02.logon();
        console.log("User 01 token: " + logonResult01.getToken());
        console.log("User 02 token: " + logonResult02.getToken());
        // Execute Instance 01
        yield m4apiNode01.loadMetadata(['PLCO_LOAD_ALL_PERSONAL_INFO']);
        const request01 = yield m4apiNode01.executeMethod("PLCO_LOAD_ALL_PERSONAL_INFO", "PLCO_PERSONAL_EMPLOYEE_INFORMT", "PLCO_LOAD_ALL_PERSONAL_INFO", ["", "", ""]);
        const objRequest01 = request01.getObject();
        if (objRequest01) {
            const nodeRequest01 = objRequest01.getNode("PSCO_EMPLOYEE_RECORD_HEADER");
            const nodeRequestValue01 = nodeRequest01.getValue("PSCO_EMPLOYEE_NAME");
            console.log("Execute 01 - Method executed ok! Number of records is: " + nodeRequest01.count());
            console.log("Execute 01 - Method executed ok! Value of records is: " + nodeRequestValue01);
            m4apiNode01.getCookieStore().getAllCookies((error, values) => {
                console.log("============================ Execute 01 - Cookie Values ============================");
                console.log("Execute 01 - Cookie Values :" + values.length);
                values.forEach((value) => {
                    console.log(value.key + " - " + value.value);
                });
                console.log("====================================================================================");
            });
        }
        // Execute Instance 02
        yield m4apiNode02.loadMetadata(['PLCO_LOAD_ALL_PERSONAL_INFO']);
        const request02 = yield m4apiNode02.executeMethod("PLCO_LOAD_ALL_PERSONAL_INFO", "PLCO_PERSONAL_EMPLOYEE_INFORMT", "PLCO_LOAD_ALL_PERSONAL_INFO", ["", "", ""]);
        const objRequest02 = request02.getObject();
        if (objRequest02) {
            const nodeRequest02 = objRequest02.getNode("PSCO_EMPLOYEE_RECORD_HEADER");
            const nodeRequestValue02 = nodeRequest02.getValue("PSCO_EMPLOYEE_NAME");
            console.log("Execute 02 - Method executed ok! Number of records is: " + nodeRequest02.count());
            console.log("Execute 02 - Method executed ok! Value of records is: " + nodeRequestValue02);
            m4apiNode02.getCookieStore().getAllCookies((error, values) => {
                console.log("============================ Execute 02 - Cookie Values ============================");
                console.log("Execute 02 - Cookie Values :" + values.length);
                values.forEach((value) => {
                    console.log(value.key + " - " + value.value);
                });
                console.log("====================================================================================");
            });
        }
        // Observable
        console.log("============================ Observables ============================");
        const m4node = request02.getObject().getNode("PSCO_EMPLOYEE_RECORD_HEADER");
        const m4NodeObservable = m4apiNode02.createObservableByNodeItemChanged(m4node);
        const m4EmployeName = m4node.getValue("PSCO_EMPLOYEE_NAME");
        console.log('EMPLOYE NAME before subscribe ' + m4EmployeName);
        m4NodeObservable.subscribe({
            next(node) { console.log('Observale - New value: ' + node.getValue("PSCO_EMPLOYEE_NAME")); },
            error(err) { console.error('Observale - something wrong occurred: ' + err); },
            complete() { console.log('Observale - done'); }
        });
        console.log('EMPLOYE NAME after subscribe...');
        m4node.setValue("PSCO_EMPLOYEE_NAME", "Jin Kazama");
        // END EXAMPLES
        // Logout instances
        yield m4apiNode01.logout();
        yield m4apiNode02.logout();
        console.log("All done!");
    });
}
example();
//# sourceMappingURL=app.js.map