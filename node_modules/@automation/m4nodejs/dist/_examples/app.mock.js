"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const m4apiNode_1 = require("../m4apiNode");
const fs = __importStar(require("fs"));
function exampleMock() {
    return __awaiter(this, void 0, void 0, function* () {
        // Create Instances
        const m4apiNode = new m4apiNode_1.M4ApiNode("http://arya.meta4.com:5020", "notExists", "foo");
        // Initialize instances
        yield m4apiNode.initializeAsync();
        // Mock M4JSAPI
        const _metadataM4ObjPersonalInfo = fs.readFileSync("./__mocks__/metadata/PLCO_LOAD_ALL_PERSONAL_INFO.xml", 'utf8');
        m4apiNode.__mock__initialize__();
        m4apiNode.__mock__setM4ObjectMetadata__("PLCO_LOAD_ALL_PERSONAL_INFO", _metadataM4ObjPersonalInfo);
        const m4ObjectMock = yield m4apiNode.createM4Object("PLCO_LOAD_ALL_PERSONAL_INFO");
        console.log("Mocked M4Object: " + m4ObjectMock.getId());
        m4apiNode.__mock__finalize__();
    });
}
exampleMock();
//# sourceMappingURL=app.mock.js.map