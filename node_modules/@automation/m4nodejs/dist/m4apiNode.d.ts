import rxjs = require('rxjs');
import { M4Request } from './m4Interfaces/M4Request';
import tough = require('tough-cookie');
import { M4Node } from "./m4Interfaces/M4Node";
import { M4Object } from "./m4Interfaces/M4Object";
import { M4LogonResult } from "./m4Interfaces/M4LogonResult";
declare global {
    namespace NodeJS {
        interface Global {
            M4nodejs: Map<string, any>;
            document: Document;
            window: Window;
            navigator: Navigator;
            DOMParser: DOMParser;
        }
    }
    interface Window {
        meta4: any;
        meta4OnLoad: any;
    }
}
export declare class M4ApiNode {
    private server;
    private user;
    private pass;
    private apiUrl;
    private m4Executor;
    private m4Window;
    private m4Store;
    private m4CookieStore;
    private showConsoleMsg;
    private isMocking;
    private mapMockM4ObjectMetadata;
    m4WindowXHR: XMLHttpRequest;
    /**
     * Constructor
     * @param {string} server
     * @param {string} user
     * @param {string} pass
     */
    constructor(server: string, user: string, pass: string);
    /**
     * Returns User property value setted in constructor.
     */
    getUser(): string;
    /**
     * Returns Server property value setted in constructor.
     */
    getServer(): string;
    /**
     * Returns Api URL. (M4JSAPI Node URL)
     */
    getApiUrl(): string;
    /**
     * Returns Cookie Storage. (https://www.npmjs.com/package/tough-cookie)
     */
    getCookieStore(): tough.MemoryCookieStore;
    /**
     * Enable Console messages.
     */
    enableConsoleMessages(): void;
    /**
     * Disable Console messages.
     */
    disableConsoleMessages(): void;
    /**
     * Import JavaScript file: compile and run code
     * @param {string} url
     */
    __importJavaScriptFileFromUrl__(url: string): Promise<boolean>;
    /**
     * Initialize M4JSAPI Mock
     * - Override M4Executor.LoadMetadata: Load XML Metadata from mock
     */
    __mock__initialize__(): void;
    /**
     * Reset Mock
     * - Clear M4Object XML Metadata mocked
     */
    __mock__reset__(): void;
    /**
     * Finalize M4JSAPI Mock
     * - Restores M4Executor.LoadMetadata
     */
    __mock__finalize__(): void;
    /**
     * Set M4Object Metadata Content to mocking M4Executor.LoadMetadata
     * @param {string} m4objectId
     * @param {string} m4ObjectMetadata
     */
    __mock__setM4ObjectMetadata__(m4objectId: string, m4ObjectMetadata: string): void;
    /**
     * Get Window Object from this instance
     */
    __getWindowObject__(): any;
    /**
     * Print menssage in the console.
     * @param {String} message
     */
    private consoleMessage;
    /**
     * Get M4Executor.
     * @returns {M4Executor} m4Executor
     */
    private getM4Executor;
    /**
     * Import M4JSAPI from apiUrl property.
     */
    private importM4Jsapi;
    /**
     * Set M4Executor.
     * @param {com.meta4.js.client.M4Executor} m4Executor
     */
    private setM4Executor;
    /**
     * Resolves when M4JSAPI library is loaded.
     * @returns {Promise}
     */
    private isM4JsapiLoaded;
    /**
     * Return jsdom.DOMWindow from instance.
     */
    private getWindow;
    /**
     * Create M4Executor instance.
     */
    private createM4Executor;
    /**
     * Initialize M4jsapi instance as jsdom.DOMWindow.
     */
    initializeAsync(): Promise<boolean>;
    /**
     * Logon User promise-based asynchronous.
     */
    logon(): Promise<M4LogonResult>;
    /**
     * Logout User promise-based asynchronous.
     */
    logout(): Promise<M4Request>;
    /**
     * Load Metadata promise-based asynchronous.
     * @param {Array} m4ObjectIds M4Object Ids to load metadata.
     */
    loadMetadata(m4ObjectIds: string[]): Promise<M4Request>;
    /**
     * Execute method promise-based asynchronous. [Implicitly load metadata]
     * @param {String} m4objectId M4Object ID
     * @param {String} nodeId Node ID
     * @param {String} methodId Method ID
     * @param {Array} methodArgs Method arguments
     */
    executeMethod(m4objectId: string, nodeId: string, methodId: string, methodArgs: any[]): Promise<M4Request>;
    /**
     * Execute method promise-based asynchronous.
     * @param {String} m4objectId M4Object ID
     * @param {String} nodeId Node ID
     * @param {String} methodId Method ID
     * @param {Array} methodArgs Method arguments
     */
    executeM4ObjectMethod(m4object: M4Object, nodeId: string, methodId: string, methodArgs: any[]): Promise<M4Request>;
    /**
     * Execute MRequest instance.
     * @param {M4Request} m4Request
     */
    executeM4Request(m4Request: M4Request): Promise<M4Request>;
    /**
     * Execute method promise-based asynchronous.
     * @param {M4Object} m4object M4Object instance
     * @param {String} nodeId Node ID
     * @param {String} methodId Method ID
     * @param {Array} methodArgs Method arguments
     */
    createM4Request(m4object: M4Object, nodeId: string, methodId: string, methodArgs: any[]): M4Request;
    /**
     * Convert execute method Promise to Observable RxJS. [Implicitly load metadata]
     * @param {String} m4objectId M4Object ID
     * @param {String} nodeId Node ID
     * @param {String} methodId Method ID
     * @param {Array} methodArgs Method arguments
     */
    executeMethodObservable(m4objectId: string, nodeId: string, methodId: string, methodArgs: any[]): rxjs.Observable<M4Request>;
    /**
     * Create object instance asynchronous. [Implicitly load metadata]
     * @param {String} m4objectId M4Object ID
     */
    createM4Object(m4objectId: string): Promise<M4Object>;
    /**
     * Register node item changed callback as RxJS Observable.
     * @param {M4Node} m4Node M4Node
     */
    createObservableByNodeItemChanged(m4Node: M4Node): rxjs.Observable<any>;
    /**
     * Register node records changed callback as RxJS Observable.
     * @param {M4Node} m4Node M4Node
     */
    createObservableByNodeRecordsChanged(m4Node: M4Node): rxjs.Observable<any>;
    /**
     * Register node current changed callback as RxJS Observable.
     * @param {M4Node} m4Node M4Node
     */
    createObservableByNodeCurrentChanged(m4Node: M4Node): rxjs.Observable<any>;
}
